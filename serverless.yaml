# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: nananah
service: curve-lend-telegram-bot
provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 10 # optional, in seconds, default is 6
  versionFunctions: false # optional, default is true
  tracing:
    lambda: true # optional, enables tracing for all functions (can be true (true equals 'Active') 'Active' or 'PassThrough')
  environment:
    BOT_TOKEN: ${env:BOT_TOKEN}
    DRPC_KEY: ${env:DRPC_KEY}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    SQS_URL: ${construct:address-queue-worker.queueUrl}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:BatchGetItem'
            - 'dynamodb:Scan*'
            - 'dynamodb:Query*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/WatchedAddresses

functions:
  echo:
    handler: functions/chat.handler
    name: ${sls:stage}-curve-lend-telegram-bot-chat
    logRetentionInDays: 7
    events:
      - httpApi:
          method: POST
          path: /telegraf
  address-queue-publisher:
    handler: functions/sqs-publisher.handler
    name: ${sls:stage}-curve-lend-telegram-bot-sqs-publisher
    events:
      - schedule:
          rate: rate(1 minute)

constructs:
  address-queue-worker:
    type: queue
    worker:
      handler: functions/sqs-worker.handler
      timeout: 20
    alarm:  ${env:SQS_DEAD_LETTER_QUEUE_NOTIFICATION_EMAIL}
    encryption: 'kmsManaged'
    batchSize: 100 # Get 100 queued items at a time; IF thus number needs to go higher, then sqs-worker.js and its associated getUsersData.js will need to be reworked because BatchGetCommand allows max 100 entries requested at once
    maxBatchingWindow: 60 # Seconds (consume 100 items at a time, or less if threshold not reached after 60s)
    maxConcurrency: 2 # At most 2 concurrent lambdas invoked at once

resources:
  Resources:
    WatchedAddresses:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WatchedAddresses
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: telegram_user_id
            AttributeType: N
        KeySchema:
          - AttributeName: telegram_user_id
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true

plugins:
  - serverless-lift
